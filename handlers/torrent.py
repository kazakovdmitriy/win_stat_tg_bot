from aiogram import Router, Bot
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command, CommandObject
from aiogram.types import Message, InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext

import aiohttp
import os
import re
from urllib.parse import urlparse, unquote

from services.torrent_service import TorrentService
from services.keyboards import get_torrent_folders_keyboard, get_main_keyboard
from services.logger import get_logger
from config import config

router = Router()
logger = get_logger(__name__)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ —Ç–æ—Ä—Ä–µ–Ω—Ç —Ñ–∞–π–ª–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_torrent_data = {}

class TorrentState(StatesGroup):
    viewing = State()
    

def parse_content_disposition(content_disposition):
    """–ü–∞—Ä—Å–∏—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ Content-Disposition –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç –∏–º—è —Ñ–∞–π–ª–∞"""
    if not content_disposition:
        return None
    
    # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –∏–º—è —Ñ–∞–π–ª–∞ –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞
    filename_match = re.search(r'filename\*?=["\']?(?:UTF-\d["\']*)?([^;"\']+)["\']?', content_disposition)
    if filename_match:
        filename = filename_match.group(1)
        # –î–µ–∫–æ–¥–∏—Ä—É–µ–º URL-encoded —Å—Ç—Ä–æ–∫—É
        filename = unquote(filename)
        return filename
    
    # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –ø–æ–∏—Å–∫–∞ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
    filename_match = re.search(r'filename=["\']([^"\']+)["\']', content_disposition)
    if filename_match:
        return filename_match.group(1)


@router.message(Command("torrent"))
async def torrent_help_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /torrent - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø—Ä–∞–≤–∫—É"""
    if message.from_user.id not in config.allowed_users:
        return
    
    help_text = (
        "üß≤ <b>–†–∞–±–æ—Ç–∞ —Å —Ç–æ—Ä—Ä–µ–Ω—Ç —Ñ–∞–π–ª–∞–º–∏</b>\n\n"
        "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ .torrent —Ñ–∞–π–ª, –∏ —è –ø—Ä–µ–¥–ª–æ–∂—É –≤—ã–±—Ä–∞—Ç—å –ø–∞–ø–∫—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.\n\n"
        "üìÅ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∞–ø–∫–∏:</b>\n"
    )
    
    for folder_name, folder_path in config.torrent_folders.items():
        help_text += f"‚Ä¢ {folder_name}: <code>{folder_path}</code>\n"
    
    await message.answer(help_text, parse_mode="HTML", reply_markup=get_main_keyboard())


@router.message(Command("–Ω–∞–π—Ç–∏"))
async def torrent_search_handler(message: Message, command: CommandObject, state: FSMContext, torrent_service: TorrentService):
    if message.from_user.id not in config.allowed_users:
        return
    
    args = command.args
    
    if args:
        blocks = torrent_service.search_torrent(args)
        
        await state.set_state(TorrentState.viewing)
        # await state.update_data(torrent_blocks=blocks)
        
        message_ids = []
        
        for i, block in enumerate(blocks):
            
            text = torrent_service.format_message(block)
            button = InlineKeyboardButton(text="üì• –°–∫–∞—á–∞—Ç—å", callback_data=f"download_{i}")
            keyboard = InlineKeyboardMarkup(inline_keyboard=[[button]])

            send_message = await message.answer(text, parse_mode="HTML", reply_markup=keyboard)
            
            message_ids.append(send_message.message_id)
            
            await state.update_data(
                torrent_blocks=blocks,
                search_message_ids=message_ids,
                command_message_id=message.message_id
            )
            
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –æ—á–∏—Å—Ç–∫–∏ –ø–æ–∏—Å–∫–∞
        clear_button = InlineKeyboardButton(text="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å", callback_data="clear_search")
        clear_keyboard = InlineKeyboardMarkup(inline_keyboard=[[clear_button]])
        clear_message = await message.answer(
            "–í—ã –º–æ–∂–µ—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞, –µ—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –Ω—É–∂–Ω—ã–π —Ç–æ—Ä—Ä–µ–Ω—Ç:",
            reply_markup=clear_keyboard
        )
        message_ids.append(clear_message.message_id)
    else:
        text = "–î–ª—è –ø–æ–∏—Å–∫–∞ –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã. –ù–∞–ø—Ä–∏–º–µ—Ä: /search –ú–∞—Ç—Ä–∏—Ü–∞ 4"
        await message.answer(text, parse_mode="HTML", reply_markup=get_main_keyboard())


@router.callback_query(lambda callback: callback.data == 'clear_search')
async def clear_search_handler(callback: CallbackQuery, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—á–∏—Å—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞"""
    if callback.from_user.id not in config.allowed_users:
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    user_data = await state.get_data()
    search_message_ids = user_data.get('search_message_ids', [])
    command_message_id = user_data.get('command_message_id')
    
    # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø–æ–∏—Å–∫–∞
    deleted_count = 0
    for msg_id in search_message_ids:
        try:
            await bot.delete_message(chat_id=callback.from_user.id, message_id=msg_id)
            deleted_count += 1
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è {msg_id}: {e}")
    
    # –¢–∞–∫–∂–µ —É–¥–∞–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–º–∞–Ω–¥–æ–π /search
    try:
        await bot.delete_message(chat_id=callback.from_user.id, message_id=command_message_id)
        deleted_count += 1
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã {command_message_id}: {e}")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–± –æ—á–∏—Å—Ç–∫–µ
    await callback.answer(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ {deleted_count} —Å–æ–æ–±—â–µ–Ω–∏–π", show_alert=False)
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –ø–æ–∏—Å–∫ –æ—á–∏—â–µ–Ω
    await callback.message.answer(
        "‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –æ—á–∏—â–µ–Ω—ã. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /search",
        reply_markup=get_main_keyboard()
    )

        
@router.callback_query(lambda callback: callback.data.startswith('download_'))
async def torrent_download(callback: CallbackQuery, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ç–æ—Ä—Ä–µ–Ω—Ç–∞ –ø–æ —Å—Å—ã–ª–∫–µ"""
    if callback.from_user.id not in config.allowed_users:
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    user_data = await state.get_data()
    blocks = user_data.get('torrent_blocks', [])
    search_message_ids = user_data.get('search_message_ids', [])
    command_message_id = user_data.get('command_message_id')
    index = int(callback.data.split("_")[1])

    if index < len(blocks):
        selected_block = blocks[index]
        await callback.answer("üì• –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ—Ä—Ä–µ–Ω—Ç...", show_alert=False)

        try:
            # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø–æ–∏—Å–∫–∞
            for msg_id in search_message_ids:
                try:
                    await bot.delete_message(chat_id=callback.from_user.id, message_id=msg_id)
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è {msg_id}: {e}")
            
            # –¢–∞–∫–∂–µ —É–¥–∞–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–º–∞–Ω–¥–æ–π /search
            try:
                await bot.delete_message(chat_id=callback.from_user.id, message_id=command_message_id)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã {command_message_id}: {e}")
            
            # –°–∫–∞—á–∏–≤–∞–µ–º .torrent —Ñ–∞–π–ª –ø–æ —Å—Å—ã–ª–∫–µ
            async with aiohttp.ClientSession() as session:
                async with session.get(selected_block["Link"]) as response:
                    if response.status == 200:
                        # –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ Content-Disposition
                        content_disposition = response.headers.get('Content-Disposition')
                        filename = parse_content_disposition(content_disposition)
                        
                        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∏–º—è –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏–∑ URL
                        if not filename:
                            parsed_url = urlparse(selected_block["Link"])
                            filename = os.path.basename(parsed_url.path)
                            
                            # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —É —Ñ–∞–π–ª–∞ –µ—Å—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ .torrent
                            if not filename.endswith('.torrent'):
                                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –±–ª–æ–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
                                safe_title = "".join(c for c in selected_block["Title"] if c.isalnum() or c in (' ', '.', '_')).rstrip()
                                filename = f"{safe_title}.torrent"
                        
                        # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
                        file_data = await response.read()
                        
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
                        user_torrent_data[callback.from_user.id] = {
                            'file_data': file_data,
                            'file_name': filename
                        }
                        
                        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å –ø–∞–ø–∫—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
                        await callback.message.answer(
                            f"üì• <b>–ü–æ–ª—É—á–µ–Ω —Ç–æ—Ä—Ä–µ–Ω—Ç —Ñ–∞–π–ª:</b> <code>{filename}</code>\n\n"
                            "üìÅ –ö—É–¥–∞ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —ç—Ç–æ—Ç —Ñ–∞–π–ª?",
                            parse_mode="HTML",
                            reply_markup=get_torrent_folders_keyboard()
                        )
                    else:
                        await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª", show_alert=True)
        except Exception as e:
            logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ç–æ—Ä—Ä–µ–Ω—Ç —Ñ–∞–π–ª–∞ –ø–æ —Å—Å—ã–ª–∫–µ")
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞", show_alert=True)
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞: –±–ª–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)


@router.message(lambda message: message.document and message.document.file_name and 
                message.document.file_name.lower().endswith('.torrent'))
async def torrent_file_handler(message: Message, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è .torrent —Ñ–∞–π–ª–∞"""
    if message.from_user.id not in config.allowed_users:
        return
    
    logger.info(f"–ü–æ–ª—É—á–µ–Ω —Ç–æ—Ä—Ä–µ–Ω—Ç —Ñ–∞–π–ª {message.document.file_name} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    
    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        user_torrent_data[message.from_user.id] = {
            'document': message.document,
            'message_id': message.message_id
        }
        
        await message.answer(
            f"üì• <b>–ü–æ–ª—É—á–µ–Ω —Ç–æ—Ä—Ä–µ–Ω—Ç —Ñ–∞–π–ª:</b> <code>{message.document.file_name}</code>\n\n"
            "üìÅ –ö—É–¥–∞ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —ç—Ç–æ—Ç —Ñ–∞–π–ª?",
            parse_mode="HTML",
            reply_markup=get_torrent_folders_keyboard()
        )
        
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–æ—Ä—Ä–µ–Ω—Ç —Ñ–∞–π–ª–∞")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=get_main_keyboard()
        )


@router.callback_query(lambda callback: callback.data.startswith('torrent_folder:'))
async def torrent_folder_callback_handler(callback: CallbackQuery, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–∞–ø–∫–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ—Ä—Ä–µ–Ω—Ç–∞"""
    if callback.from_user.id not in config.allowed_users:
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    try:
        folder_name = callback.data.split(':', 1)[1]
        user_id = callback.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –æ —Ñ–∞–π–ª–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_id not in user_torrent_data:
            await callback.answer("‚ùå –î–∞–Ω–Ω—ã–µ –æ —Ñ–∞–π–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ñ–∞–π–ª–µ
        file_data = user_torrent_data[user_id].get('file_data')
        file_name = user_torrent_data[user_id].get('file_name')
        
        if not file_data or not file_name:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª–∞ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω—ã")
            return
        
        await callback.answer("üíæ –°–æ—Ö—Ä–∞–Ω—è—é —Ñ–∞–π–ª...")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        saved_path = await TorrentService.save_torrent_file_from_bytes(
            file_data, file_name, folder_name
        )
        
        if saved_path:
            success_text = (
                f"‚úÖ <b>–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!</b>\n\n"
                f"üìÅ <b>–ü–∞–ø–∫–∞:</b> {folder_name}\n"
                f"üìÑ <b>–§–∞–π–ª:</b> <code>{file_name}</code>\n"
                f"üíæ <b>–ü—É—Ç—å:</b> <code>{saved_path}</code>"
            )
            
            await callback.message.edit_text(
                success_text,
                parse_mode="HTML"
            )
            
            logger.info(f"–¢–æ—Ä—Ä–µ–Ω—Ç —Ñ–∞–π–ª {file_name} —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id} –≤ –ø–∞–ø–∫—É {folder_name}")
        else:
            await callback.message.edit_text(
                "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞!</b>\n\n"
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø–∞–ø–∫–∏ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                parse_mode="HTML"
            )
        
        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        if user_id in user_torrent_data:
            del user_torrent_data[user_id]
            
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç–æ—Ä—Ä–µ–Ω—Ç —Ñ–∞–π–ª–∞")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏")
        await callback.message.edit_text(
            "‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞!</b>\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            parse_mode="HTML"
        )


@router.callback_query(lambda callback: callback.data == 'torrent_cancel')
async def torrent_cancel_callback_handler(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ—Ä—Ä–µ–Ω—Ç–∞"""
    if callback.from_user.id not in config.allowed_users:
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    user_id = callback.from_user.id
    
    # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    if user_id in user_torrent_data:
        del user_torrent_data[user_id]
    
    await callback.answer("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ")
    await callback.message.edit_text(
        "‚ùå <b>–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–æ—Ä—Ä–µ–Ω—Ç —Ñ–∞–π–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ</b>",
        parse_mode="HTML"
    )
    
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–º–µ–Ω–∏–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–æ—Ä—Ä–µ–Ω—Ç —Ñ–∞–π–ª–∞") 