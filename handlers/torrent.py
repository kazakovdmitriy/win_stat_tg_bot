from aiogram import Router, Bot
from aiogram.types import Message, CallbackQuery, Document
from aiogram.filters import Command
from services.torrent_service import TorrentService
from services.keyboards import get_torrent_folders_keyboard, get_main_keyboard
from services.logger import get_logger
from config import config

router = Router()
logger = get_logger(__name__)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ —Ç–æ—Ä—Ä–µ–Ω—Ç —Ñ–∞–π–ª–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_torrent_data = {}


@router.message(Command("torrent"))
async def torrent_help_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /torrent - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø—Ä–∞–≤–∫—É"""
    if message.from_user.id not in config.allowed_users:
        return
    
    help_text = (
        "üß≤ <b>–†–∞–±–æ—Ç–∞ —Å —Ç–æ—Ä—Ä–µ–Ω—Ç —Ñ–∞–π–ª–∞–º–∏</b>\n\n"
        "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ .torrent —Ñ–∞–π–ª, –∏ —è –ø—Ä–µ–¥–ª–æ–∂—É –≤—ã–±—Ä–∞—Ç—å –ø–∞–ø–∫—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.\n\n"
        "üìÅ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∞–ø–∫–∏:</b>\n"
    )
    
    for folder_name, folder_path in config.torrent_folders.items():
        help_text += f"‚Ä¢ {folder_name}: <code>{folder_path}</code>\n"
    
    await message.answer(help_text, parse_mode="HTML", reply_markup=get_main_keyboard())


@router.message(lambda message: message.document and message.document.file_name and 
                message.document.file_name.lower().endswith('.torrent'))
async def torrent_file_handler(message: Message, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è .torrent —Ñ–∞–π–ª–∞"""
    if message.from_user.id not in config.allowed_users:
        return
    
    logger.info(f"–ü–æ–ª—É—á–µ–Ω —Ç–æ—Ä—Ä–µ–Ω—Ç —Ñ–∞–π–ª {message.document.file_name} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    
    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        user_torrent_data[message.from_user.id] = {
            'document': message.document,
            'message_id': message.message_id
        }
        
        await message.answer(
            f"üì• <b>–ü–æ–ª—É—á–µ–Ω —Ç–æ—Ä—Ä–µ–Ω—Ç —Ñ–∞–π–ª:</b> <code>{message.document.file_name}</code>\n\n"
            "üìÅ –ö—É–¥–∞ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —ç—Ç–æ—Ç —Ñ–∞–π–ª?",
            parse_mode="HTML",
            reply_markup=get_torrent_folders_keyboard()
        )
        
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–æ—Ä—Ä–µ–Ω—Ç —Ñ–∞–π–ª–∞")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=get_main_keyboard()
        )


@router.callback_query(lambda callback: callback.data.startswith('torrent_folder:'))
async def torrent_folder_callback_handler(callback: CallbackQuery, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–∞–ø–∫–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ—Ä—Ä–µ–Ω—Ç–∞"""
    if callback.from_user.id not in config.allowed_users:
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    try:
        folder_name = callback.data.split(':', 1)[1]
        user_id = callback.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –æ —Ñ–∞–π–ª–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_id not in user_torrent_data:
            await callback.answer("‚ùå –î–∞–Ω–Ω—ã–µ –æ —Ñ–∞–π–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –∑–∞–Ω–æ–≤–æ.")
            return
        
        document = user_torrent_data[user_id]['document']
        
        await callback.answer("üíæ –°–æ—Ö—Ä–∞–Ω—è—é —Ñ–∞–π–ª...")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        saved_path = await TorrentService.save_torrent_file(document, bot, folder_name)
        
        if saved_path:
            success_text = (
                f"‚úÖ <b>–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!</b>\n\n"
                f"üìÅ <b>–ü–∞–ø–∫–∞:</b> {folder_name}\n"
                f"üìÑ <b>–§–∞–π–ª:</b> <code>{document.file_name}</code>\n"
                f"üíæ <b>–ü—É—Ç—å:</b> <code>{saved_path}</code>"
            )
            
            await callback.message.edit_text(
                success_text,
                parse_mode="HTML"
            )
            
            logger.info(f"–¢–æ—Ä—Ä–µ–Ω—Ç —Ñ–∞–π–ª {document.file_name} —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id} –≤ –ø–∞–ø–∫—É {folder_name}")
        else:
            await callback.message.edit_text(
                "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞!</b>\n\n"
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø–∞–ø–∫–∏ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                parse_mode="HTML"
            )
        
        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        if user_id in user_torrent_data:
            del user_torrent_data[user_id]
            
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç–æ—Ä—Ä–µ–Ω—Ç —Ñ–∞–π–ª–∞")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏")
        await callback.message.edit_text(
            "‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞!</b>\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            parse_mode="HTML"
        )


@router.callback_query(lambda callback: callback.data == 'torrent_cancel')
async def torrent_cancel_callback_handler(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ—Ä—Ä–µ–Ω—Ç–∞"""
    if callback.from_user.id not in config.allowed_users:
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    user_id = callback.from_user.id
    
    # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    if user_id in user_torrent_data:
        del user_torrent_data[user_id]
    
    await callback.answer("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ")
    await callback.message.edit_text(
        "‚ùå <b>–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–æ—Ä—Ä–µ–Ω—Ç —Ñ–∞–π–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ</b>",
        parse_mode="HTML"
    )
    
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–º–µ–Ω–∏–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–æ—Ä—Ä–µ–Ω—Ç —Ñ–∞–π–ª–∞") 