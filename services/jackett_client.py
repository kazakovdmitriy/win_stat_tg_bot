import requests
from services.logger import get_logger
from typing import List, Dict
from urllib.parse import quote_plus


class JackettClient:
    def __init__(self, base_url: str, api_key: str, timeout: int = 30):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ Jackett
        
        :param base_url: –ë–∞–∑–æ–≤—ã–π URL Jackett (–Ω–∞–ø—Ä–∏–º–µ—Ä, "http://192.168.1.103:9117")
        :param api_key: API –∫–ª—é—á Jackett
        :param timeout: –¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        """
        self.base_url = base_url.rstrip('/')
        self.api_key = api_key
        self.timeout = timeout
        self.session = requests.Session()
        
        self.logger = get_logger(__name__)

    def search(self, query: str, indexer: str = "all", category: str = None, 
               limit: int = 20) -> List[Dict]:
        """
        –ü–æ–∏—Å–∫ —Ç–æ—Ä—Ä–µ–Ω—Ç–æ–≤
        
        :param query: –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
        :param indexer: –ò–Ω–¥–µ–∫—Å–µ—Ä (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é "all" - –≤—Å–µ –∏–Ω–¥–µ–∫—Å–∞—Ç–æ—Ä—ã)
        :param category: –ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        :param limit: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        :return: –°–ø–∏—Å–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
        """
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º URL –∑–∞–ø—Ä–æ—Å–∞
            url = f"http://{self.base_url}/api/v2.0/indexers/{indexer}/results"
            params = {
                "apikey": self.api_key,
                "Query": query
            }
            
            if category:
                params["Category"] = category
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
            response = self.session.get(url, params=params, timeout=self.timeout)
            response.raise_for_status()
            
            # –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç
            data = response.json()
            results = data.get("Results", [])
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å–∏–¥–æ–≤ (–µ—Å–ª–∏ –µ—Å—Ç—å) –∏ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            if results and "Size" in results[0]:
                results.sort(key=lambda x: x.get("Size", 0), reverse=True)
            
            return results[:limit]
            
        except requests.exceptions.RequestException as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞: {e}")
            return []
        except ValueError as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ JSON: {e}")
            return []

    def get_indexers(self) -> List[Dict]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –∏–Ω–¥–µ–∫—Å–µ—Ä–æ–≤
        
        :return: –°–ø–∏—Å–æ–∫ –∏–Ω–¥–µ–∫—Å–µ—Ä–æ–≤
        """
        try:
            url = f"{self.base_url}/api/v2.0/indexers"
            response = self.session.get(url, params={"apikey": self.api_key}, timeout=self.timeout)
            response.raise_for_status()
            return response.json()
        except requests.exceptions.RequestException as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–æ–∫ –∏–Ω–¥–µ–∫—Å–µ—Ä–æ–≤: {e}")
            return []

    def format_result(self, result: Dict) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram
        
        :param result: –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞
        :return: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
        """
        title = result.get("Title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
        tracker = result.get("Tracker", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç—Ä–µ–∫–µ—Ä")
        size = self._format_size(result.get("Size", 0))
        seeders = result.get("Seeders", "N/A")
        leechers = result.get("Peers", "N/A")
        if leechers != "N/A" and seeders != "N/A":
            leechers = leechers - seeders  # Peers = Seeders + Leechers
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = (
            f"üé¨ <b>{title}</b>\n"
            f"üìä –¢—Ä–µ–∫–µ—Ä: <code>{tracker}</code>\n"
            f"üì¶ –†–∞–∑–º–µ—Ä: <code>{size}</code>\n"
            f"üë§ –°–∏–¥—ã: <code>{seeders}</code>\n"
            f"‚¨áÔ∏è –õ–∏—á–∏: <code>{leechers}</code>\n"
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –º–∞–≥–Ω–∏—Ç –∏–ª–∏ –¥–µ—Ç–∞–ª–∏
        # if "MagnetUri" in result and result["MagnetUri"]:
        #     message += f"üß≤ <a href='{result['MagnetUri']}'>–ú–∞–≥–Ω–µ—Ç-—Å—Å—ã–ª–∫–∞</a>\n"
        # if "Link" in result and result["Link"]:
        #     message += f"<a href='{result['Link']}'>.torrent</a>\n"
        # elif "Details" in result and result["Details"]:
        #     message += f"üîó <a href='{result['Details']}'>–°—Å—ã–ª–∫–∞ –Ω–∞ –¥–µ—Ç–∞–ª–∏</a>\n"
        
        return message

    def _format_size(self, size_bytes: int) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞ –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥
        
        :param size_bytes: –†–∞–∑–º–µ—Ä –≤ –±–∞–π—Ç–∞—Ö
        :return: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Ä–∞–∑–º–µ—Ä–∞
        """
        if size_bytes == 0:
            return "0 B"
        
        size_names = ["B", "KB", "MB", "GB", "TB"]
        i = 0
        while size_bytes >= 1024 and i < len(size_names) - 1:
            size_bytes /= 1024.0
            i += 1
            
        return f"{size_bytes:.2f} {size_names[i]}"
